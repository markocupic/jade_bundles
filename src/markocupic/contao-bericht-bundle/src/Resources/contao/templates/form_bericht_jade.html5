<!-- indexer::stop -->
<div class="<?= $this->class ?> block"<?= $this->cssID ?><?php if ($this->style): ?> style="<?= $this->style ?>"<?php endif; ?>>

    <?php if ($this->headline): ?>
  <<?= $this->hl ?>><?= $this->headline ?></<?= $this->hl ?>>
<?php endif; ?>

<form<?php if ($this->action): ?> action="<?= $this->action ?>"<?php endif; ?> method="<?= $this->method ?>" enctype="<?= $this->enctype ?>"<?= $this->attributes ?><?= $this->novalidate ?>>
  <div class="formbody">
      <?php if ($this->method != 'get'): ?>
        <input type="hidden" name="FORM_SUBMIT" value="<?= $this->formId ?>">
        <input type="hidden" name="REQUEST_TOKEN" value="{{request_token}}">
          <?php if ($this->maxFileSize): ?>
          <input type="hidden" name="MAX_FILE_SIZE" value="<?= $this->maxFileSize ?>">
          <?php endif; ?>
      <?php endif; ?>

      <?= $this->visibleWidgets['titel']->parse() ?>
      <?= $this->visibleWidgets['pruefungsdatum']->parse() ?>
      <?= $this->visibleWidgets['pruefungsbezirk']->parse() ?>
      <?= $this->visibleWidgets['bericht']->parse() ?>

    <hr>
      <?= $this->visibleWidgets['captcha']->parse() ?>
      <?= $this->visibleWidgets['submit']->parse() ?>
  </div>
</form>

</div>


<script>window.tinymce || document.write('<script src="assets/tinymce4/js/tinymce.min.js">\x3C/script>')</script>
<script src="assets/tinymce4/js/tinymce.min.js"></script>
<script>
    setTimeout(function() {
        window.tinymce && tinymce.init({
            skin: 'contao',
            selector: 'textarea',
            language: 'de',
            element_format: 'html',
            document_base_url: '{{env::url}}/',
            entities: '160,nbsp,60,lt,62,gt,173,shy',
            branding: false,
            setup: function(editor) {
                editor.getElement().removeAttribute('required');
            },
            init_instance_callback: function(editor) {
                //if (document.activeElement && document.activeElement.id && document.activeElement.id == editor.id) {
                    //editor.editorManager.get(editor.id).focus();
                //}
                //editor.on('focus', function() { Backend.getScrollOffset(); });
            },
            file_browser_callback: function(field_name, url, type, win) {
                //Backend.openModalBrowser(field_name, url, type, win);
            },
            //file_browser_callback_types: ["image","file"],
            plugins: 'autosave charmap code fullscreen importcss link lists paste searchreplace stripnbsp tabfocus table visualblocks',
            browser_spellcheck: true,
            tabfocus_elements: ':prev,:next',
            importcss_append: true,
            extended_valid_elements: 'q[cite|class|title],article,section,hgroup,figure,figcaption',
            menubar: 'insert view format table',
            toolbar: 'link unlink | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | undo redo | code'
        });
    }, 0);
</script>
<!-- indexer::continue -->







